/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateCategoryInput: { // input type
    description?: string | null; // String
    name: string; // String!
  }
  CreateContactInput: { // input type
    ext: string; // String!
    number: number; // Int!
    userId: string; // String!
  }
  CreateServiceInput: { // input type
    categoryId: string; // String!
    content: string; // String!
    location: number; // Float!
    servitorId: string; // String!
    title: string; // String!
  }
  CreateUserInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  }
  getCategoryIdInput: { // input type
    id: string; // String!
  }
  getServiseIdInput: { // input type
    id: string; // String!
  }
  getUserIdInput: { // input type
    id: string; // String!
  }
  getUserInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  seachServiseInput: { // input type
    content: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Category: { // root type
    description?: string | null; // String
    id: string; // ID!
    name: string; // String!
  }
  Contact: { // root type
    ext: string; // String!
    id: string; // ID!
    number: number; // Int!
    userId?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Service: { // root type
    categoryId?: string | null; // String
    content: string; // String!
    id: string; // ID!
    isValid: boolean; // Boolean!
    location: number; // Float!
    reviews: number; // Float!
    servitorId?: string | null; // String
    title: string; // String!
  }
  User: { // root type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Category: { // field return type
    description: string | null; // String
    id: string; // ID!
    name: string; // String!
    service: Array<NexusGenRootTypes['Service'] | null> | null; // [Service]
  }
  Contact: { // field return type
    User: NexusGenRootTypes['User'] | null; // User
    ext: string; // String!
    id: string; // ID!
    number: number; // Int!
    userId: string | null; // String
  }
  Mutation: { // field return type
    createCategory: NexusGenRootTypes['Category']; // Category!
    createContact: NexusGenRootTypes['Contact']; // Contact!
    createServise: NexusGenRootTypes['Service']; // Service!
    createUser: NexusGenRootTypes['User']; // User!
    getCategoryId: NexusGenRootTypes['Category'] | null; // Category
    getServiseId: NexusGenRootTypes['Service'] | null; // Service
    getUser: NexusGenRootTypes['User'] | null; // User
    getUserId: NexusGenRootTypes['User'] | null; // User
    seachServise: Array<NexusGenRootTypes['Service'] | null> | null; // [Service]
  }
  Query: { // field return type
    contacts: NexusGenRootTypes['Contact'][]; // [Contact!]!
    services: NexusGenRootTypes['Service'][]; // [Service!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Service: { // field return type
    category: NexusGenRootTypes['Category'] | null; // Category
    categoryId: string | null; // String
    content: string; // String!
    id: string; // ID!
    isValid: boolean; // Boolean!
    location: number; // Float!
    reviews: number; // Float!
    servitor: NexusGenRootTypes['User'] | null; // User
    servitorId: string | null; // String
    title: string; // String!
  }
  User: { // field return type
    Contacts: Array<NexusGenRootTypes['Contact'] | null> | null; // [Contact]
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
    services: Array<NexusGenRootTypes['Service'] | null> | null; // [Service]
  }
}

export interface NexusGenFieldTypeNames {
  Category: { // field return type name
    description: 'String'
    id: 'ID'
    name: 'String'
    service: 'Service'
  }
  Contact: { // field return type name
    User: 'User'
    ext: 'String'
    id: 'ID'
    number: 'Int'
    userId: 'String'
  }
  Mutation: { // field return type name
    createCategory: 'Category'
    createContact: 'Contact'
    createServise: 'Service'
    createUser: 'User'
    getCategoryId: 'Category'
    getServiseId: 'Service'
    getUser: 'User'
    getUserId: 'User'
    seachServise: 'Service'
  }
  Query: { // field return type name
    contacts: 'Contact'
    services: 'Service'
    users: 'User'
  }
  Service: { // field return type name
    category: 'Category'
    categoryId: 'String'
    content: 'String'
    id: 'ID'
    isValid: 'Boolean'
    location: 'Float'
    reviews: 'Float'
    servitor: 'User'
    servitorId: 'String'
    title: 'String'
  }
  User: { // field return type name
    Contacts: 'Contact'
    email: 'String'
    id: 'ID'
    name: 'String'
    password: 'String'
    services: 'Service'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCategory: { // args
      category: NexusGenInputs['CreateCategoryInput']; // CreateCategoryInput!
    }
    createContact: { // args
      contact: NexusGenInputs['CreateContactInput']; // CreateContactInput!
    }
    createServise: { // args
      service: NexusGenInputs['CreateServiceInput']; // CreateServiceInput!
    }
    createUser: { // args
      user: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
    getCategoryId: { // args
      category: NexusGenInputs['getCategoryIdInput']; // getCategoryIdInput!
    }
    getServiseId: { // args
      service: NexusGenInputs['getServiseIdInput']; // getServiseIdInput!
    }
    getUser: { // args
      user: NexusGenInputs['getUserInput']; // getUserInput!
    }
    getUserId: { // args
      user: NexusGenInputs['getUserIdInput']; // getUserIdInput!
    }
    seachServise: { // args
      service: NexusGenInputs['seachServiseInput']; // seachServiseInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}